
.zero r0
.temps r6, r7

.section rodata
state:
        .space 1 
jumpTable:
        .space 256

.section init 
        m[r0][state] := r0 # Starts off in waiting mode
        r1 := r0
        
        
invalidReadSetLoop: # Set all 256 characters to an invalid read
        r5 := jumpTable + r1
        m[r0][r5] := invalidRead
        r1 := r1 + 1
        if (r1 != 256) goto invalidReadSetLoop using r4, r5

        # Add all of the functions for the valid functions
        m[r0][jumpTable + '\n'] := printValue
        m[r0][jumpTable + '+']  := add
        m[r0][jumpTable + '-']  := subtract
        m[r0][jumpTable + '*']  := multiply
        m[r0][jumpTable + '/']  := divide
        m[r0][jumpTable + '|']  := or
        m[r0][jumpTable + '&']  := and
        m[r0][jumpTable + 'c']  := changeSign
        m[r0][jumpTable + '~']  := complement
        m[r0][jumpTable + 's']  := swap
        m[r0][jumpTable + 'd']  := duplicate
        m[r0][jumpTable + 'p']  := popValue
        m[r0][jumpTable + 'z']  := clear
        m[r0][jumpTable + ' ']  := doNothing

        m[r0][jumpTable + '0']  := entering
        m[r0][jumpTable + '1']  := entering
        m[r0][jumpTable + '2']  := entering
        m[r0][jumpTable + '3']  := entering
        m[r0][jumpTable + '4']  := entering
        m[r0][jumpTable + '5']  := entering
        m[r0][jumpTable + '6']  := entering
        m[r0][jumpTable + '7']  := entering
        m[r0][jumpTable + '8']  := entering
        m[r0][jumpTable + '9']  := entering
        
        r4 := r0

.section text

# The different operations # 

# Name      : printValue
# Purpose   : Prints all of the values on the stack currently, with the top
#             value being the top of the stack
# Parameters: None
# Return    : None 
# Notes     : Will print out to the terminal; 
#             Needs the stack/value/result register to be correct
#             Assumes the jump table is set up
printValue:
        push r1 on stack r2     # Saves the return location
        goto enterWaiting linking r1

        r5 := r3
loopStackValues: # Prints each value in the stack
        if (r5 == valueStack) goto finishPrintValue using r1
        
        r1 := m[r0][r5]

        output ">>> "

        push r5 on stack r2 
        push r1 on stack r2 
        goto printDigit linking r1
        pop stack r2
        pop r5 off stack r2

        output '\n'
        
        r5 := r5 + 1
        
        goto loopStackValues
finishPrintValue:
        pop r5 off stack r2     # Gets back the return location 

        r1 := 0
        goto r5 

# Name      : add
# Purpose   : Pops v1 off of the value stack, then pops v2 off of the value
#             stack, then push v1 + v2 onto the value stack
# Parameters: None
# Return    : None 
# Notes     : Adjusts the value stack;
#             Will print an error and not perform the operation 
#               if there are not enough values on the stack
add:
        push r1 on stack r2     # Saves the return location
        goto enterWaiting linking r1
        
        # Check_stack
        push r4 on stack r2
        if(r3 >s valueStack - 2) goto print_underflow_2 using r4,r5
        
        pop r1 off stack r3 # Get the top value of the stack 
        # r1 := r1 + '0'
        # output r1
        # output "that was number"
        pop r5 off stack r3 # Get the second top value of the stack
        r5 := r5 + r1 # add them together 
        push r5 on stack r3 # Push the added value onto the stack

        pop r4 off stack r2
        pop r5 off stack r2     # Gets back the return location 
        r1 := 0
        goto r5 

# Name      : subtract
# Purpose   : Pops v1 off of the value stack, then pops v2 off of the value
#             stack, then pushes v2 - v1 onto the value stack
# Parameters: None
# Return    : None 
# Notes     : Adjusts the value stack;
#             Will print an error and not perform the operation 
#               if there are not enough values on the stack
subtract:
        push r1 on stack r2     # Saves the return location
        
        goto enterWaiting linking r1
        # Check_stack
        push r4 on stack r2
        if(r3 >s valueStack - 2) goto print_underflow_2 using r4,r5

        pop r1 off stack r3 # Get the top value of the stack 
        pop r5 off stack r3 # Get the second top value of the stack

        r5 := r5 - r1 # subtracts them  
        push r5 on stack r3 # Push the subtracted value onto the stack
        pop r4 off stack r2
        pop r5 off stack r2     # Gets back the return location 

        r1 := 0
        goto r5 

# Name      : multiply
# Purpose   : Pops v1 off of the value stack, then pops v2 off of the value 
#             stack, then pushes v1 * v2 onto the stack (signed multiplication)
# Parameters: None 
# Return    : None 
# Notes     : Adjusts the value stack;
#             Will print an error and not perform the operation 
#               if there are not enough values on the stack
multiply:
        push r1 on stack r2     # Saves the return location
        goto enterWaiting linking r1
        
        # Check_stack
        push r4 on stack r2
        if(r3 >s valueStack - 2) goto print_underflow_2 using r4,r5

        pop r1 off stack r3 # Get the top value of the stack 
        pop r5 off stack r3 # Get the second top value of the stack

        r5 := r5 * r1 # multiplies them  
        push r5 on stack r3 # Push the multiplied value onto the stack
        pop r4 off stack r2
        pop r5 off stack r2     # Gets back the return location 

        r1 := 0
        goto r5 

# Name      : divide
# Purpose   : Pops value v1 off the value stack, then pops v2 off the value 
#             stack, and pushes v2 / v1 onto the value stack (signed division)
# Parameters: None 
# Return    : None 
# Notes     : Adjusts the value stack;
#             Will print an error and not perform the operation 
#               if there are not enough values on the stack;
#             Will print an error and not perform the operation 
#               if v1 is 0
divide:
        push r1 on stack r2     # Saves the return location
        
        goto enterWaiting linking r1
        # Check_stack
        push r4 on stack r2 
        if(r3 >s valueStack - 2) goto print_underflow_2 using r4,r5
        pop r4 off stack r2
        if (m[r0][r3] != r0) goto divideNoError using r1

        output "Division by zero\n"
        
        pop r5 off stack r2     # Gets back the return location 

        r1 := 0
        goto r5 
divideNoError: # Continue from here if no error was detected
        # Check_stack
        pop r1 off stack r3 # Get the top value of the stack 
        pop r5 off stack r3 # Get the second top value of the stack

        push r3 on stack r2 
        push r4 on stack r2 

        # Check the sign
        r3 := 0x80000000 & r1 
        r4 := r1 xor r5 
        r4 :=  0x80000000 & r4 
        push r4 on stack r2 # Stores the sign of the final result
        if (r3 == r0) goto checkDenominatorSign using r4
        r1 := r0 - r1 
checkDenominatorSign: # Assumes by here, numerator is positive
        r3 := 0x80000000 & r5
        if (r3 == r0) goto afterSignCheck using r4
        r5 := r0 - r5 
afterSignCheck: # Assumes by here, denominator is positive
        r5 := r5 / r1 # Does unsigned division
        pop r4 off stack r2 
        if (r4 == r0) goto afterPopOff using r3 
        r5 := r0 - r5
afterPopOff: # Assumes the result (r5) has the correct final sign
        pop r4 off stack r2 
        pop r3 off stack r2

        push r5 on stack r3 # Push the divided value onto the stack
        pop r5 off stack r2 # Gets back the return location 

        r1 := 0
        goto r5 

# Name      : or
# Purpose   : Pops v1 off the value stack, then pops v2 off the value stack, 
#             then pushes v1 | v2 onto the value stack (bitwise or)
# Parameters: None
# Return    : None 
# Notes     : Adjusts the value stack;
#             Will print an error and not perform the operation 
#               if there are not enough values on the stack
or:
        push r1 on stack r2     # Saves the return location
        
        goto enterWaiting linking r1
        push r4 on stack r2
        if(r3 >s valueStack - 2) goto print_underflow_2 using r4,r5
        pop r4 off stack r2
        pop r1 off stack r3 # Get the top value of the stack 
        pop r5 off stack r3 # Get the second top value of the stack

        r5 := r5 | r1 # or them  
        push r5 on stack r3 # Push the bitwise or value onto the stack

        
        pop r5 off stack r2     # Gets back the return location 

        r1 := 0
        goto r5 

# Name      : and
# Purpose   : Pops v1 off of the value stack, then pops v2 off of the value
#             stack, then pushes v1 & v2 onto the value stack (bitwise and)
# Parameters: None
# Return    : None 
# Notes     : Adjusts the value stack;
#             Will print an error and not perform the operation 
#               if there are not enough values on the stack
and:
        push r1 on stack r2     # Saves the return location
        
        goto enterWaiting linking r1
        push r4 on stack r2
        if(r3 >s valueStack - 2) goto print_underflow_2 using r4,r5
        pop r4 off stack r2
        pop r1 off stack r3 # Get the top value of the stack 
        pop r5 off stack r3 # Get the second top value of the stack

        r5 := r5 & r1 # and them  
        push r5 on stack r3 # Push the bitwise and value onto the stack

        
        pop r5 off stack r2     # Gets back the return location 

        r1 := 0
        goto r5 

# Name      : changeSign
# Purpose   : Pops v1 off of the value stack, then pushes -v1 onto the value
#             stack (turn the value negative/change sign)
# Parameters: None
# Return    : None 
# Notes     : Adjusts the value stack;
#             Will print an error and not perform the operation 
#               if there are not enough values on the stack
changeSign:
        push r1 on stack r2     # Saves the return location
        
        goto enterWaiting linking r1
        # Check_stack
        push r4 on stack r2
        if(r3 >s valueStack - 1) goto print_underflow_1 using r4,r5
        pop r4 off stack r2
        pop r5 off stack r3 # Get the top value of the stack 
        r5 := r0 - r5 # do 0 - r5 to flip the sign  
        push r5 on stack r3 # Push the changed sign onto the stack

        
        pop r5 off stack r2     # Gets back the return location 

        r1 := 0
        goto r5 

# Name      : complement
# Purpose   : Pops v1 off of the value stack, then pushes ~v1 onto the value
#             stack (bitwise complement)
# Parameters: None
# Return    : None 
# Notes     : Adjusts the value stack;
#             Will print an error and not perform the operation 
#               if there are not enough values on the stack
complement:
        push r1 on stack r2     # Saves the return location
        
        goto enterWaiting linking r1
        # Check_stack
        push r4 on stack r2
        if(r3 >s valueStack - 1) goto print_underflow_1 using r4,r5
        pop r4 off stack r2
        pop r5 off stack r3 # Get the top value of the stack
        r5 := ~r5 # multiplies them  
        push r5 on stack r3 # Push the complemented value onto the stack

       
        pop r5 off stack r2     # Gets back the return location 

        r1 := 0
        goto r5 

# Name      : swap
# Purpose   : Pops v1 off the value stack, then pops v2 off the value stack, 
#             then pushes v1 on the value stack, then pushes v2 on the value 
#             stack (Swaps the position of the top two value stack values)
# Parameters: None
# Return    : None 
# Notes     : Adjusts the value stack;
#             Will print an error and not perform the operation 
#               if there are not enough values on the stack
swap:
        push r1 on stack r2     # Saves the return location
        
        goto enterWaiting linking r1
        push r4 on stack r2
        if(r3 >s valueStack - 2) goto print_underflow_2 using r4,r5
        pop r4 off stack r2
        pop r1 off stack r3 # Get the top value of the stack 
        pop r5 off stack r3 # Get the second top value of the stack

        # Push them on to reverse order
        push r1 on stack r3 
        push r5 on stack r3 
        
        pop r5 off stack r2     # Gets back the return location 

        r1 := 0
        goto r5 

# Name      : duplicate
# Purpose   : Pushes a copy of the top of the value stack onto the value stack
#             (Duplicates the top value)
# Parameters: None
# Return    : None 
# Notes     : Adjusts the value stack;
#             Will print an error and not perform the operation 
#               if there are not enough values on the stack
duplicate:
        push r1 on stack r2     # Saves the return location
        
        goto enterWaiting linking r1
        push r4 on stack r2
        if(r3 >s valueStack - 1) goto print_underflow_1 using r4,r5
        pop r4 off stack r2
        r5 := r3
        push m[r0][r5] on stack r3 # Pushes the top value of the stack

        
        pop r5 off stack r2     # Gets back the return location 

        r1 := 0
        goto r5 

# Name      : pop
# Purpose   : Removes the top value of the value stack (pops off the value)
# Parameters: None
# Return    : None 
# Notes     : Adjusts the value stack;
#             Will print an error and not perform the operation 
#               if there are not enough values on the stack
popValue:
        push r1 on stack r2     # Saves the return location
        
        goto enterWaiting linking r1
        push r4 on stack r2
        if(r3 >s valueStack - 1) goto print_underflow_1 using r4,r5
        pop r4 off stack r2
        pop stack r3 # Pops the top value off

        
        pop r5 off stack r2     # Gets back the return location 

        r1 := 0
        goto r5 

# Name      : clear
# Purpose   : Clears the value stack (Make the value stack empty)
# Parameters: None
# Return    : None 
# Notes     : Adjusts the value stack
clear:
        push r1 on stack r2     # Saves the return location
        
        goto enterWaiting linking r1
        r3 := valueStack

        pop r5 off stack r2     # Gets back the return location 

        r1 := 0
        goto r5 

# Name      : doNothing
# Purpose   : Does nothing (except exit entering mode)
# Parameters: None
# Return    : None 
# Notes     : Only changes state
doNothing:
        push r1 on stack r2     # Saves the return location
        
        goto enterWaiting linking r1
        
        pop r5 off stack r2     # Gets back the return location 

        r1 := 0
        goto r5 


# Name      : entering
# Purpose   : Recieves the inputed number (into r4)
# Parameters: (unsigned char) The value of the character read 
# Return    : None 
# Notes     : Adjusts the value stack;
#             Adjusts the r4 value (The running total of the inputed value)
entering:
        push r1 on stack r2     # Saves the return location
        
        goto enterEntering linking r1
        
        # Gets the character as a number
        r5 := r2 + 1
        r5 := m[r0][r5]
        r5 := r5 - '0'

        # Adds the number to the running total

        r4 := r4 * 10
        r4 := r4 + r5
        
        pop r5 off stack r2     # Gets back the return location 

        r1 := 0
        goto r5 

# Name      : invalidRead
# Purpose   : Prints out an invalid read message (Exits entering mode)
# Parameters: None
# Return    : None 
# Notes     : Only called when other characters are bad
invalidRead:
        push r1 on stack r2     # Saves the return location
        
        goto enterWaiting linking r1

        output "Unknown character \'"
        output m[r0][r2 + 1]
        output "\'\n" 

        pop r5 off stack r2     # Gets back the return location 

        r1 := 0
        goto r5 

# HELPER FUNCTIONS #

# Name      : print_underflow_1 
# Purpose   : Prints out the error message for when the value stack has less 
#             than 1 value on the stack, but the operation requires 1 value
# Parameters: none 
# Return    : None 
# Notes     : print out message then go back to call
print_underflow_1:
        pop r4 off stack r2
        output "Stack underflow---expected at least 1 element"
        output "\n"
        pop r5 off stack r2     # Gets back the return location 
        r1 := 0
        goto r5 

# Name      : print_underflow_2 
# Purpose   : Prints out the error message for when the value stack has less 
#             than 2 values on the stack, but the operation requires 2 values
# Parameters: none 
# Return    : None 
# Notes     : print out message then go back to call
print_underflow_2:
        pop r4 off stack r2
        output "Stack underflow---expected at least 2 elements"
        output "\n"
        pop r5 off stack r2     # Gets back the return location 
        r1 := 0
        goto r5 

# Name      : enterWaiting
# Purpose   : Changes state to waiting, setting the running value (r4) to 0
#             if the program was in entering mode
# Parameters: None
# Return    : None 
# Notes     : Changes state (The state value in the data section); 
#             All calculator functions call this except entering
enterWaiting:
        push r1 on stack r2     # Saves the return location

        # If already in waiting state, do nothing
        if (m[r0][state] == r0) goto exitWaitingFunction using r1

        # Otherwise, go to the waiting state
        push r4 on stack r3
        r4 := r0

        m[r0][state] := r0
        
exitWaitingFunction:
        pop r5 off stack r2     # Gets back the return location 

        r1 := 0
        goto r5 

# Name      : enterEntering
# Purpose   : Changes state to entering, setting the running value (r4) to 0 
#             in order to prepare for taking the next possible digits
# Parameters: None
# Return    : None 
# Notes     : Changes state (The state value in the data section); 
#             Only called by entering
enterEntering:
        push r1 on stack r2     # Saves the return location
        
        if (m[r0][state] == 1) goto exitEnteringFunction using r1, r5

        r4 := r0
        m[r0][state] := 1

exitEnteringFunction:
        pop r5 off stack r2     # Gets back the return location 

        r1 := 0
        goto r5 
