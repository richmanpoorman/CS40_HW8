.temps r6, r7 
.zero r0
.section text
// maybe I don't need the finish_digits function 
// ignore
check_negative:
        push r1 on stack r2
        push r4 on stack r2
        push r3 on stack r2
        r3 := m[r0][3];
        if(r3 <s r0) goto make_postive using r5,r4
        push r3 on stack r2
        goto printDigit linking r1 
        pop stack r2
        pop r3 off stack r2
        pop r4 off stack r2
        pop r5 off stack r2
        goto r5
        make_postive:
        output "-"
        r3 := r0 - r3
        push r3 on stack r2
        goto printDigit linking r1 
        pop stack r2
        pop r3 off stack r2
        pop r4 off stack r2
        pop r5 off stack r2
        goto r5


printDigit:
        push r1 on stack r2
        push r4 on stack r2
        push r3 on stack r2
        
        r5 := r2 + 3
        r3 := m[r0][r5]

        if (r3 <s 10) goto base_case using r5, r4
        
        // recursive call
        r5 := r3 mod 10
        push r5 on stack r2

        r5 := r3 / 10
        push r5 on stack r2
        goto printDigit linking r1 //go to line 19
        pop stack r2

        pop r5 off stack r2
        r5 := r5 + '0'
        # output "\nRecursive: \n"
        output r5
        goto finish_digits
    base_case:
        r3 := r3 + '0'
        # output "\nBase: \n"
        output r3
        goto finish_digits
    finish_digits:
        pop r3 off stack r2
        pop r4 off stack r2
        pop r5 off stack r2
        goto r5
